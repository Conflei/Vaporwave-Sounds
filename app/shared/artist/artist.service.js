"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var config_1 = require("../config");
var artist_model_1 = require("./artist.model");
var ArtistService = /** @class */ (function () {
    function ArtistService(http) {
        this.http = http;
        this.baseUrl = config_1.Config.apiUrl + "appdata/" + config_1.Config.appKey + "/anime";
    }
    ArtistService.prototype.load = function () {
        // Kinvey-specific syntax to sort the groceries by last modified time. Donâ€™t worry about the details here.
        var params = new http_1.URLSearchParams();
        params.append("sort", "{\"_kmd.lmt\": 1}");
        return this.http.get(this.baseUrl, {
            headers: this.getCommonHeaders(),
            params: params
        }).pipe(operators_1.map(function (res) { return res.json(); }), operators_1.map(function (data) {
            var artistList = [];
            data.forEach(function (artist) {
                artistList.push(new artist_model_1.Artist(artist._id, artist.Name, artist.finished, artist.lastc, artist.rank));
            });
            return artistList;
        }), operators_1.catchError(this.handleErrors));
    };
    ArtistService.prototype.add = function (name, finished, lastc, rank) {
        return this.http.post(this.baseUrl, JSON.stringify({ Name: name, finished: finished, lastc: lastc, rank: rank }), { headers: this.getCommonHeaders() }).pipe(operators_1.map(function (res) { return res.json(); }), operators_1.map(function (data) {
            return new artist_model_1.Artist(data._id, data.name, data.finished, data.lastc, data.rank);
        }), operators_1.catchError(this.handleErrors));
    };
    ArtistService.prototype.update = function (id, name, finished, lastc, rank) {
        return this.http.put(this.baseUrl + "/" + id, JSON.stringify({ Name: name, finished: finished, lastc: lastc, rank: rank }), { headers: this.getCommonHeaders() }).pipe(operators_1.map(function (res) { return res.json(); }), operators_1.map(function (data) {
            return new artist_model_1.Artist(data._id, data.name, data.finished, data.lastc, data.rank);
        }), operators_1.catchError(this.handleErrors));
    };
    ArtistService.prototype.delete = function (id) {
        return this.http.delete(this.baseUrl + "/" + id, { headers: this.getCommonHeaders() }).pipe(operators_1.map(function (res) { return res.json(); }), operators_1.catchError(this.handleErrors));
    };
    ArtistService.prototype.getCommonHeaders = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Authorization", "Kinvey " + config_1.Config.token);
        return headers;
    };
    ArtistService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return rxjs_1.Observable.throw(error);
    };
    ArtistService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], ArtistService);
    return ArtistService;
}());
exports.ArtistService = ArtistService;
//# sourceMappingURL=data:application/json;base64,